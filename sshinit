#!/bin/sh

# Program to initialize an SSH configuration with a host. Makes a new SSH key, 
# copies that to the host, appends the use of that key to the local 
# ~/.ssh/config. If the -r option is invoked, it will also su into the host's
# root user, and copy the ssh key there.

# Usage: 
#   ssh-init [-r] user@host


# Parse arguments.
usage='ssh-init [-r] user@host'
root=0
for arg in "$@"; do
    echo 'iter'
    case $1 in
        -r) 
            root=1
            ;;
        *@*) 
            echo "match for $1"
            target=$1
            ;;
        *)
            echo $usage
            ;;
    esac
done

username=$(echo $target |cut -d \@ -f 1)
hostname=$(echo $target |cut -d \@ -f 2)
keypath=$HOME/.ssh/auto/$target
pubpath=$keypath.pub
config=$HOME/.ssh/config

# Makes a keypair with no password, and an unidentifying comment.
makeKey () {
    mkdir -p $HOME/.ssh/auto
    chmod 700 $HOME/.ssh/auto
    ssh-keygen -t ed25519 -f $HOME/.ssh/auto/$target -C $target -N ""
    echo "Keypair created in $HOME/.ssh/auto"
}
# Adds configuration in ~/.ssh/config which will invoke the keypair and 
# user. 
appendConfig () {
    # Find out if there is any pre-existing configuration for this host.
    confline=$(grep -n "Host $hostname" $config)
    # If there was no match, we don't have a pre-existing configuration.
    if [ $? -ne 0 ] ; then
        # We're going to be adding to the end of the file.
        echo "Host $hostname" >> $config
        startline=$(wc -l $HOME/.ssh/config |cut -d ' ' -f 1)
    else
        # If there was a match, then there is pre-existing configuration.
        # Get the line number.
        startline=$(echo $confline |cut -d ' ' - f 1)
        # Get the next declaration, if any, so we know our operational range.
        endline=$(tail -n+$startline|grep -n '^\s*Host' |\
            head -n 1 |cut -d ' ' -f 1)
    fi
    echo "startline $startline endline $endline"
    exit

    if [ $root -eq 1 ]; then
        echo "    user root" >> $config
    else
        echo "    user $username" >> $config
    fi
    echo "    IdentityFile $keypath" >> $config
    echo "Configuration added to $HOME/.ssh/config"
}
insertId () {
    ssh-copy-id -i $pubpath $target
    appendConfig
    if [ $root -eq 1 ]; then
        ssh $target 'su -c "mkdir -p /root/.ssh; tail -n 1 >> /root/.ssh/authorized_keys"'
    fi
    echo "Key installed on remote machine."
}

echo $target

appendConfig
exit
#makeKey
#insertId
